!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=11)}([function(n,e,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function c(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function u(n,e){for(var t={},r=[],o=0;o<n.length;o++){var i=n[o],u=e.base?i[0]+e.base:i[0],s=t[u]||0,d="".concat(u," ").concat(s);t[u]=s+1;var l=c(d),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==l?(a[l].references++,a[l].updater(p)):a.push({identifier:d,updater:m(p,e),references:1}),r.push(d)}return r}function s(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var d,l=(d=[],function(n,e){return d[n]=e,d.filter(Boolean).join("\n")});function p(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function f(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var h=null,v=0;function m(n,e){var t,r,o;if(e.singleton){var i=v++;t=h||(h=s(e)),r=p.bind(null,t,i,!1),o=p.bind(null,t,i,!0)}else t=s(e),r=f.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var t=u(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=c(t[r]);a[o].references--}for(var i=u(n,e),s=0;s<t.length;s++){var d=c(t[s]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}t=i}}}},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([o]).join("\n")}var a,c,u;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<n.length;c++){var u=[].concat(n[c]);r&&o[u[0]]||(t&&(u[2]?u[2]="".concat(t," and ").concat(u[2]):u[2]=t),e.push(u))}},e}},function(n,e){var t="/sw.js";Object.defineProperty(e,"__esModule",{value:!0}),e.default={register:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return!!navigator.serviceWorker&&navigator.serviceWorker.register(t,n)}},n.exports=e.default},function(n,e,t){(function(n){function e(n){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var t=function(n){"use strict";var t=Object.prototype,r=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{u({},"")}catch(n){u=function(n,e,t){return n[e]=t}}function s(n,e,t,r){var o=e&&e.prototype instanceof p?e:p,i=Object.create(o.prototype),a=new E(r||[]);return i._invoke=function(n,e,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return L()}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=_(a,t);if(c){if(c===l)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var u=d(n,e,t);if("normal"===u.type){if(r=t.done?"completed":"suspendedYield",u.arg===l)continue;return{value:u.arg,done:t.done}}"throw"===u.type&&(r="completed",t.method="throw",t.arg=u.arg)}}}(n,t,a),i}function d(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=s;var l={};function p(){}function f(){}function h(){}var v={};v[i]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(R([])));g&&g!==t&&r.call(g,i)&&(v=g);var x=h.prototype=p.prototype=Object.create(v);function b(n){["next","throw","return"].forEach((function(e){u(n,e,(function(n){return this._invoke(e,n)}))}))}function y(n,t){var o;this._invoke=function(i,a){function c(){return new t((function(o,c){!function o(i,a,c,u){var s=d(n[i],n,a);if("throw"!==s.type){var l=s.arg,p=l.value;return p&&"object"===e(p)&&r.call(p,"__await")?t.resolve(p.__await).then((function(n){o("next",n,c,u)}),(function(n){o("throw",n,c,u)})):t.resolve(p).then((function(n){l.value=n,c(l)}),(function(n){return o("throw",n,c,u)}))}u(s.arg)}(i,a,o,c)}))}return o=o?o.then(c,c):c()}}function _(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,_(n,e),"throw"===e.method))return l;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=d(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,l;var o=r.arg;return o?o.done?(e[n.resultName]=o.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,l):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,l)}function w(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function k(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function E(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(w,this),this.reset(!0)}function R(n){if(n){var e=n[i];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var t=-1,o=function e(){for(;++t<n.length;)if(r.call(n,t))return e.value=n[t],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:L}}function L(){return{value:void 0,done:!0}}return f.prototype=x.constructor=h,h.constructor=f,f.displayName=u(h,c,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,h):(n.__proto__=h,u(n,c,"GeneratorFunction")),n.prototype=Object.create(x),n},n.awrap=function(n){return{__await:n}},b(y.prototype),y.prototype[a]=function(){return this},n.AsyncIterator=y,n.async=function(e,t,r,o,i){void 0===i&&(i=Promise);var a=new y(s(e,t,r,o),i);return n.isGeneratorFunction(t)?a:a.next().then((function(n){return n.done?n.value:a.next()}))},b(x),u(x,c,"Generator"),x[i]=function(){return this},x.toString=function(){return"[object Generator]"},n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=R,E.prototype={constructor:E,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function t(t,r){return a.type="throw",a.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(n,e){for(var t=this.tryEntries.length-1;t>=0;--t){var o=this.tryEntries[t];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=n,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,l):this.complete(a)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),l},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),k(t),l}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var o=r.arg;k(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:R(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),l}},n}("object"===e(n)?n.exports:{});try{regeneratorRuntime=t}catch(n){Function("r","regeneratorRuntime = r")(t)}}).call(this,t(4)(n))},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e,t){var r=t(0),o=t(6);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);n.exports=o.locals||{}},function(n,e,t){var r=t(1),o=t(7),i=t(8);e=r(!1);var a=o(i);e.push([n.i,"img {\n    display: block;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\nbody, html {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n}\n\nbody {\n    font-family: \"Roboto\", sans-serif;\n    font-size: 12px;\n    color: #1B1A17;\n}\n\n.container {\n    padding: 0 3vw 0 3vw;\n}\n\n/*\n * Header\n *\n */\n\n.header {\n    min-height: 56px;\n    min-width: 280px;\n    transition: min-height 0.3s;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #FF8303;\n    color: #F0E3CA;\n    border-radius: 0 0 10px 10px;\n    z-index: 10;\n    position: relative;\n    padding-top: 2px;\n}\n\n.header__inner {\n    width: fit-content;\n    text-align: left;\n    display: inline-block;\n}\n\n.header__title {\n    font-weight: 300;\n    font-size: 3em;\n    margin: 0.5em 0.25em;\n    display: inline-block;\n}\n\n#hamburger.header__menu {\n    font-size: 44px;\n    padding: 10px;\n    display: flex;\n    width: fit-content;\n    text-decoration: none;\n    background: #FF8303;\n    border: none;\n    color: #F0E3CA;\n}\n\n#hamburger.header__menu:visited {\n    color: #F0E3CA;\n}\n\n#drawer.open {\n    left: 5%;\n    width: 90%;\n    -webkit-transform: translate(0, 0);\n    transform: translate(0, 0);\n}\n\n\n/*\n * Top level navigation\n */\n\n.nav {\n    width: fit-content;\n    display: flex;\n    justify-content: end;\n}\n\n.nav__list {\n    width: 100%;\n    padding: 1.3em 0;\n    margin: 0;\n}\n\n.nav__item {\n    box-sizing: border-box;\n    display: inline-block;\n    width: fit-content;\n    text-align: center;\n    line-height: 100%;\n    text-transform: capitalize;\n}\n\n.nav a {\n    display: inline-block;\n    font-size: 1.4em;\n    margin: 0 1.2em 0 1.2em;\n    text-decoration: none;\n    color: #F0E3CA;\n    padding: 16px 0;\n}\n\n.nav a:hover {\n    color: #000;\n}\n\n.explore {\n    width: 100%;\n    margin: 60px auto;\n    text-align: center;\n}\n\n.explore__label {\n    font-size: 32px;\n    font-weight: lighter;\n}\n\n.explore__label::after {\n    content: '';\n    margin: 7px 0 12px;\n    display: block;\n    border-bottom: 2px solid #eeeeee;\n}\n\n\n\n/*\n * Jumbotron\n */\n\n .hero {\n    display: flex;\n    align-items: center;\n    max-height: 100vh;\n    height: 90vh;\n    width: 100%;\n    text-align: center;\n    background-image: url("+a+");\n    background-position: center;\n    background-blend-mode: darken;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-color: lightgray;\n    position: relative;\n    top: -20px;\n    border-radius: 0 0 10px 10px;\n    padding: 0 30px;\n}\n\n.hero__inner {\n    margin: 0 auto;\n    max-width: 800px;\n}\n\n.hero__title {\n    color: #fff;\n    font-weight: 400;\n    font-size: 36px;\n}\n\n.hero__title span {\n    font-weight: 800;\n    color: #FF8303;\n}\n\n.hero__tagline {\n    color: #fff;\n    margin-top: 16px;\n    font-size: 18px;\n    font-weight: 300;\n}\n\n/*\n * main\n */\n\n main {\n    width: 100%;\n    margin: 0 auto;\n}\n\n/*\n * content\n */\n\n .content {\n    margin: 10px 10px 20px;\n    padding: 32px;\n    background-color: #F0E3CA;\n    border-radius: 10px 10px 0 0;\n}\n\n/*\n * maincontent\n */\n\n #maincontent {\n    min-height: 90vh;\n}\n\n/*\n * post\n */\n\n.posts {\n    margin: 32px auto auto;\n    text-align: left;\n}\n\n/*\n * post item\n */\n\n.post-item {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    width: 100%;\n    border-radius: 5px;\n    overflow: hidden;\n    background: #fff;\n}\n\n.post-item__content {\n    padding: 16px;\n}\n\n.post-item__thumbnail-wrapper {\n    width: 100%;\n    position: relative;\n}\n\n.post-item__thumbnail {\n    width: 100%;\n    max-height: fit-content;\n    object-fit: cover;\n    object-position: 50% 50%;\n}\n\n.post-item__ribbon {\n    position: absolute;\n    left: 0;\n    font-size: 1em;\n    top: 11%;\n    background-color: #FF8303;\n    color: #fff;\n    font-weight: 500;\n    padding: .7em;\n    padding-left: 15px;\n    border-radius: 0 7px 7px 0;\n    box-shadow: 0px 2px 1px #a35709;\n}\n\n.post-item__rating {\n    font-size: 14px;\n    text-transform: uppercase;\n    color: #999;\n}\n\n.post-item__rating__value {\n    color: #FF8303;\n    text-decoration: none;\n}\n\n.post-item__title {\n    font-weight: 500;\n    font-size: 16px;\n    margin-top: 16px;\n    transition: 0.3s opacity;\n}\n\n.post-item__title:hover {\n    opacity: 0.5;\n}\n\n.post-item__title a {\n    text-decoration: none;\n    color: inherit;\n    padding: 13px 0;\n}\n\n.post-item__description {\n    margin-top: 16px;\n    font-size: 12px;\n    line-height: 1.5em;\n}\n\n/*\n * footer\n */\n\nfooter {\n    padding: .4em;\n    padding-bottom: 2px;\n    width: 100%;\n    text-align: center;\n    background-color: #FF8303;\n    border-radius: 10px 10px 0 0;\n    position: relative;\n    top: -10px;\n}\n\nfooter p {\n    display: inline-block;\n    padding: 1.3em;\n    text-decoration: none;\n    color: #fff\n}\n\n/* Accessibility */\n\n.skip-link {\n    position: absolute;\n    top: -72px;\n    left: 0;\n    background-color: #bf1722;\n    color: white;\n    padding: 8px;\n    z-index: 100;\n }\n  \n .skip-link:focus {\n    top: 0;\n }\n\n /*\n  Movie\n*/\n\n.movie {\n    margin: 10px auto 20px;\n    padding: 58px 90px 52px;\n    width: 100%;\n    max-width: 1000px;\n    color: #1B1A17;\n    background-color: #F0E3CA;\n    border-radius: 20px;\n    font-weight: lighter;\n    min-height: 90vh;\n}\n\n.movie .movie__image {\n    width: 100%;\n    height: fit-content;\n    text-align: center;\n}\n\n.movie .movie__poster {\n    width: 100%;\n    display: inline-block;\n    border-radius: 15px;\n}\n\n.movie .movie__info, .movie__overview {\n    padding: 9px;\n}\n\n\n.movie .movie__info h3, .movie .movie__overview h3  {\n    font-size: 2em;\n    margin: 12px 0;\n}\n\n.movie .movie__info h4 {\n    margin: 8px 0;\n    font-size: 1.5em;\n}\n\n.movie .movie__info p  {\n    font-size: .9em;\n}\n\n.movie .movie__title {\n    font-size: 2.7em;\n}\n\n.movie .movie__title::after {\n    content: '';\n    margin-top: 12px;\n    display: block;\n    border-bottom: 2px solid #eeeeee;\n}\n\n.movie__info .menu__container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 6px;\n    margin: 4px 0;\n}\n\n.menu__container .menu__title {\n    grid-column: 1 / 4;\n}\n\n.menu__container h5 {\n    font-size: 1.1em;\n    padding: 5px 0;\n}\n\n.movie .movie__overview h4 {\n    margin: 5px 0;\n    font-size: 1em;\n}\n\n.movie .movie__overview .movie__review {\n    margin: 8px 0 12px;\n}\n\n /*\n  Like\n*/\n\n.like {\n    font-size: 21px;\n    position: fixed;\n    bottom: 70px;\n    right: 42px;\n    background-color: #FF8303;\n    color: #F0E3CA;\n    border: 0;\n    border-radius: 50%;\n    width: 55px;\n    height: 55px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 10;\n    border: 3px solid #F0E3CA;\n}",""]),n.exports=e},function(n,e,t){"use strict";n.exports=function(n,e){return e||(e={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},function(n,e,t){"use strict";t.r(e),e.default=t.p+"bd6b63650298f334a08b66446d66c536.jpg"},function(n,e,t){var r=t(0),o=t(10);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);n.exports=o.locals||{}},function(n,e,t){(e=t(1)(!1)).push([n.i,".posts {\n  display: grid;\n  grid-row-gap: 16px;\n}\n\n@media screen and (max-width: 524px) {\n  .nav {\n    z-index: 10;\n    background-color: #fff;\n    width: 300px;\n    position: absolute;\n    margin-top: 213px;\n    width: 58%;\n    background: #F0E3CA;\n    border-radius: 10px;\n    top: -106px;\n    -webkit-transform: translate(-320px, 0);\n    transform: translate(-320px, 0);\n    transition: transform 0.3s ease;\n  }\n\n  .nav__item {\n    display: list-item;\n    border-radius: 10px;\n    width: 100%;\n    text-align: left;\n    list-style-type: none;\n    padding: 1.3em 0;\n  }\n\n  .nav a {\n    color: #FF8303;\n    padding: 20px;\n    font-size: 20px;\n  }\n\n  .movie {\n    padding: 24px 21px 22px;\n  }\n\n  .movie__info .menu__container {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .menu__container .menu__title {\n    grid-column: 1 / 3;\n  }\n}\n\n@media screen and (min-width: 455px) {\n  .headline__content {\n    padding: 16px 16px;\n  }\n\n  .headline__title {\n    font-size: 28px;\n  }\n\n  .headline__description {\n    font-size: 16px;\n  }\n}\n\n@media screen and (min-width: 525px) {\n  #hamburger.header__menu {\n    display: none;\n  }\n}\n\n@media screen and (min-width: 650px) {\n  .headline__content {\n    margin: 0 auto;\n    max-width: 650px;\n  }\n\n  .post-item__content {\n    padding: 16px 32px 32px 32px;\n  }\n\n  .post-item__title {\n    font-size: 18px;\n  }\n\n  .post-item__description {\n    font-size: 14px;\n  }\n}\n\n@media screen and (min-width: 700px) {\n  .posts {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 10px;\n    grid-row-gap: 16px;\n  }\n\n  .post-item__thumbnail {\n    max-height: 37.5vh;\n  }\n}\n\n@media screen and (min-width: 800px) {\n  .nav__list {\n    max-width: 800px;\n    margin: 0 auto;\n  }\n}\n\n@media screen and (min-width: 900px) {\n  .headline {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n\n  .headline__content {\n    padding: 16px 32px;\n  }\n\n  .posts {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  .post-item__thumbnail {\n    max-height: 15.5vh;\n  }\n}\n\n@media screen and (min-width: 1200px) {\n  main {\n    max-width: 1200px;\n  }\n\n  .hero {\n    min-width: 1000px;\n    min-height: 80vh;\n  }\n\n  .post-item__thumbnail {\n    max-height: 21vh;\n  }\n}\n",""]),n.exports=e},function(n,e,t){"use strict";t.r(e);t(3),t(5),t(9);var r=t(2),o=t.n(r);function i(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}var a=function(){var n,e=(n=regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!("serviceWorker"in navigator)){n.next=4;break}return n.next=3,o.a.register();case 3:return n.abrupt("return");case 4:console.log("Service worker not supported in this browser");case 5:case"end":return n.stop()}}),n)})),function(){var e=this,t=arguments;return new Promise((function(r,o){var a=n.apply(e,t);function c(n){i(a,r,o,c,u,"next",n)}function u(n){i(a,r,o,c,u,"throw",n)}c(void 0)}))});return function(){return e.apply(this,arguments)}}(),c={KEY:"12345",BASE_URL:"https://restaurant-api.dicoding.dev/",BASE_IMAGE_URL:"https://restaurant-api.dicoding.dev/images/medium/",DEFAULT_LANGUAGE:"en-us",CACHE_NAME:"Kenyangin-V1",DATABASE_NAME:"kenyangin-database",DATABASE_VERSION:1,OBJECT_STORE_NAME:"restaurants",WEB_SOCKET_SERVER:"wss://stormy-badlands-06326.herokuapp.com"},u={LIST:"".concat(c.BASE_URL,"list"),FAVORITE:"",DETAIL:function(n){return"".concat(c.BASE_URL,"detail/").concat(n)}};function s(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}function d(n){return function(){var e=this,t=arguments;return new Promise((function(r,o){var i=n.apply(e,t);function a(n){s(i,r,o,a,c,"next",n)}function c(n){s(i,r,o,a,c,"throw",n)}a(void 0)}))}}function l(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var p,f,h=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n)}var e,t,r,o,i;return e=n,t=null,r=[{key:"restaurantsList",value:(i=d(regeneratorRuntime.mark((function n(){var e,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(u.LIST);case 2:return e=n.sent,n.next=5,e.json();case 5:return t=n.sent,n.abrupt("return",t.restaurants);case 7:case"end":return n.stop()}}),n)}))),function(){return i.apply(this,arguments)})},{key:"detailRestaurant",value:(o=d(regeneratorRuntime.mark((function n(e){var t,r;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(u.DETAIL(e));case 2:return t=n.sent,n.next=5,t.json();case 5:return r=n.sent,n.abrupt("return",r.restaurant);case 7:case"end":return n.stop()}}),n)}))),function(n){return o.apply(this,arguments)})}],t&&l(e.prototype,t),r&&l(e,r),n}(),v={parseActiveUrlWithCombiner:function(){var n=window.location.hash.slice(1).toLowerCase(),e=this._urlSplitter(n);return this._urlCombiner(e)},parseActiveUrlWithoutCombiner:function(){var n=window.location.hash.slice(1).toLowerCase();return this._urlSplitter(n)},_urlSplitter:function(n){var e=n.split("/");return{resource:e[1]||null,id:e[2]||null,verb:e[3]||null}},_urlCombiner:function(n){return(n.resource?"/".concat(n.resource):"/")+(n.id?"/:id":"")+(n.verb?"/".concat(n.verb):"")}};var m=new WeakMap,g=new WeakMap,x=new WeakMap,b=new WeakMap,y=new WeakMap;var _={get:function(n,e,t){if(n instanceof IDBTransaction){if("done"===e)return g.get(n);if("objectStoreNames"===e)return n.objectStoreNames||x.get(n);if("store"===e)return t.objectStoreNames[1]?void 0:t.objectStore(t.objectStoreNames[0])}return E(n[e])},set:function(n,e,t){return n[e]=t,!0},has:function(n,e){return n instanceof IDBTransaction&&("done"===e||"store"===e)||e in n}};function w(n){return n!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(f||(f=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(n)?function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.apply(R(this),t),E(m.get(this))}:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return E(n.apply(R(this),t))}:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];var i=n.call.apply(n,[R(this),e].concat(r));return x.set(i,e.sort?e.sort():[e]),E(i)}}function k(n){return"function"==typeof n?w(n):(n instanceof IDBTransaction&&function(n){if(!g.has(n)){var e=new Promise((function(e,t){var r=function(){n.removeEventListener("complete",o),n.removeEventListener("error",i),n.removeEventListener("abort",i)},o=function(){e(),r()},i=function(){t(n.error||new DOMException("AbortError","AbortError")),r()};n.addEventListener("complete",o),n.addEventListener("error",i),n.addEventListener("abort",i)}));g.set(n,e)}}(n),e=n,(p||(p=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((function(n){return e instanceof n}))?new Proxy(n,_):n);var e}function E(n){if(n instanceof IDBRequest)return e=n,(t=new Promise((function(n,t){var r=function(){e.removeEventListener("success",o),e.removeEventListener("error",i)},o=function(){n(E(e.result)),r()},i=function(){t(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",i)}))).then((function(n){n instanceof IDBCursor&&m.set(n,e)})).catch((function(){})),y.set(t,e),t;var e,t;if(b.has(n))return b.get(n);var r=k(n);return r!==n&&(b.set(n,r),y.set(r,n)),r}var R=function(n){return y.get(n)};function L(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function S(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?L(Object(t),!0).forEach((function(e){A(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):L(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function A(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function j(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}var O=["get","getKey","getAll","getAllKeys","count"],P=["put","add","delete","clear"],C=new Map;function B(n,e){if(n instanceof IDBDatabase&&!(e in n)&&"string"==typeof e){if(C.get(e))return C.get(e);var t=e.replace(/FromIndex$/,""),r=e!==t,o=P.includes(t);if(t in(r?IDBIndex:IDBObjectStore).prototype&&(o||O.includes(t))){var i=function(){var n,e=(n=regeneratorRuntime.mark((function n(e){var i,a,c,u,s,d,l=arguments;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:for(a=this.transaction(e,o?"readwrite":"readonly"),c=a.store,u=l.length,s=new Array(u>1?u-1:0),d=1;d<u;d++)s[d-1]=l[d];return r&&(c=c.index(s.shift())),n.next=6,Promise.all([(i=c)[t].apply(i,s),o&&a.done]);case 6:return n.abrupt("return",n.sent[0]);case 7:case"end":return n.stop()}}),n,this)})),function(){var e=this,t=arguments;return new Promise((function(r,o){var i=n.apply(e,t);function a(n){j(i,r,o,a,c,"next",n)}function c(n){j(i,r,o,a,c,"throw",n)}a(void 0)}))});return function(n){return e.apply(this,arguments)}}();return C.set(e,i),i}}}function F(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}function T(n){return function(){var e=this,t=arguments;return new Promise((function(r,o){var i=n.apply(e,t);function a(n){F(i,r,o,a,c,"next",n)}function c(n){F(i,r,o,a,c,"throw",n)}a(void 0)}))}}_=function(n){return S(S({},n),{},{get:function(e,t,r){return B(e,t)||n.get(e,t,r)},has:function(e,t){return!!B(e,t)||n.has(e,t)}})}(_);var I=c.OBJECT_STORE_NAME,M=function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=t.blocked,o=t.upgrade,i=t.blocking,a=t.terminated,c=indexedDB.open(n,e),u=E(c);return o&&c.addEventListener("upgradeneeded",(function(n){o(E(c.result),n.oldVersion,n.newVersion,E(c.transaction))})),r&&c.addEventListener("blocked",(function(){return r()})),u.then((function(n){a&&n.addEventListener("close",(function(){return a()})),i&&n.addEventListener("versionchange",(function(){return i()}))})).catch((function(){})),u}(c.DATABASE_NAME,c.DATABASE_VERSION,{upgrade:function(n){n.createObjectStore(I,{keyPath:"id"})}}),D={getRestaurant:function(n){return T(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,M;case 2:return e.abrupt("return",e.sent.get(I,n));case 3:case"end":return e.stop()}}),e)})))()},getAllRestaurants:function(){return T(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,M;case 2:return n.abrupt("return",n.sent.getAll(I));case 3:case"end":return n.stop()}}),n)})))()},putRestaurant:function(n){return T(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,M;case 2:return e.abrupt("return",e.sent.put(I,n));case 3:case"end":return e.stop()}}),e)})))()},deleteRestaurant:function(n){return T(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,M;case 2:return e.abrupt("return",e.sent.delete(I,n));case 3:case"end":return e.stop()}}),e)})))()}},z=function(n){return'\n  <div class="post-item">\n    <div class="post-item__thumbnail-wrapper">\n      <img class="post-item__thumbnail"\n        src="'.concat(c.BASE_IMAGE_URL).concat(n.pictureId,'"\n        alt="Foto Restaurant ').concat(n.name,'" tabindex="0">\n      <p class="post-item__ribbon" tabindex="0">Kota ').concat(n.city,'</p>\n    </div>\n    <div class="post-item__content">\n      <p class="post-item__rating" tabindex="0"> ⭐️ <span class="post-item__rating__value">').concat(n.rating,'</span></p>\n      <h1 class="post-item__title"><a href="#/detail/').concat(n.id,'" tabindex="0">').concat(n.name,'</a></h1>\n      <p class="post-item__description" tabindex="0">').concat(n.description,"</p>\n    </div>\n  </div>\n")},N=function(n,e,t,r){return'\n  <h2 class="movie__title" tabindex="0">'.concat(n.name,'</h2>\n  <div class="movie__image">\n    <img tabindex="0" class="movie__poster" src="').concat(c.BASE_IMAGE_URL+n.pictureId,'" alt="Foto Restaurant ').concat(n.name,'" />\n  </div>\n  <div class="movie__info">\n  <h3 tabindex="0">Informasi</h3>\n    <h4 tabindex="0">Kota</h4>\n    <p tabindex="0">').concat(n.city,'</p>\n    <h4 tabindex="0">Address</h4>\n    <p tabindex="0">').concat(n.address,'</p>\n    <h4 tabindex="0">Rating</h4>\n    <p tabindex="0"> ⭐️ ').concat(n.rating,'</p>\n    <h4 tabindex="0">Description</h4>\n    <p tabindex="0">').concat(n.description,'</p>\n    <h4 tabindex="0">Menu</h4>\n    <div class="menu__container">\n      <div class="menu__title"><h5 tabindex="0">Makanan</h5></div>\n      ').concat(e,'\n    </div>\n    <div class="menu__container">\n      <div class="menu__title"><h5 tabindex="0">Minuman</h5></div>\n      ').concat(t,'\n    </div>\n  </div>\n  <div class="movie__overview">\n    <h3 tabindex="0">Customer Reviews</h3>\n    ').concat(r,"\n  </div>\n")};function U(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}function q(n){return function(){var e=this,t=arguments;return new Promise((function(r,o){var i=n.apply(e,t);function a(n){U(i,r,o,a,c,"next",n)}function c(n){U(i,r,o,a,c,"throw",n)}a(void 0)}))}}var G={init:function(n){var e=this;return q(regeneratorRuntime.mark((function t(){var r,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=n.likeButtonContainer,o=n.restaurant,e._likeButtonContainer=r,e._restaurant=o,t.next=5,e._renderButton();case 5:case"end":return t.stop()}}),t)})))()},_renderButton:function(){var n=this;return q(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n._restaurant.id,e.next=3,n._isRestaurantExist(t);case 3:if(!e.sent){e.next=7;break}n._renderLiked(),e.next=8;break;case 7:n._renderLike();case 8:case"end":return e.stop()}}),e)})))()},_isRestaurantExist:function(n){return q(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,D.getRestaurant(n);case 2:return t=e.sent,e.abrupt("return",!!t);case 4:case"end":return e.stop()}}),e)})))()},_renderLike:function(){var n=this;this._likeButtonContainer.innerHTML='\n  <button aria-label="like this movie" id="likeButton" class="like">\n     <i class="fa fa-heart-o" aria-hidden="true"></i>\n  </button>\n',document.querySelector("#likeButton").addEventListener("click",q(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,D.putRestaurant(n._restaurant);case 2:n._renderButton();case 3:case"end":return e.stop()}}),e)}))))},_renderLiked:function(){var n=this;this._likeButtonContainer.innerHTML='\n  <button aria-label="unlike this movie" id="likeButton" class="like">\n    <i class="fa fa-heart" aria-hidden="true"></i>\n  </button>\n',document.querySelector("#likeButton").addEventListener("click",q(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,D.deleteRestaurant(n._restaurant.id);case 2:n._renderButton();case 3:case"end":return e.stop()}}),e)}))))}};function W(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}function H(n){return function(){var e=this,t=arguments;return new Promise((function(r,o){var i=n.apply(e,t);function a(n){W(i,r,o,a,c,"next",n)}function c(n){W(i,r,o,a,c,"throw",n)}a(void 0)}))}}function K(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}function V(n){return function(){var e=this,t=arguments;return new Promise((function(r,o){var i=n.apply(e,t);function a(n){K(i,r,o,a,c,"next",n)}function c(n){K(i,r,o,a,c,"throw",n)}a(void 0)}))}}var J={render:function(){return V(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",'\n    <section class="content">\n      <div class="explore">\n        <h3 class="explore__label" tabindex="0">Favorite Restaurant</h3>\n        <div id="posts" class="posts"></div>\n      </div>\n    </section>\n    ');case 1:case"end":return n.stop()}}),n)})))()},afterRender:function(){return V(regeneratorRuntime.mark((function n(){var e,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return document.querySelector("#drawer").style="border: 5px solid #FF8303",n.next=4,D.getAllRestaurants();case 4:e=n.sent,t=document.querySelector("#posts"),e.forEach((function(n){t.innerHTML+=z(n)}));case 7:case"end":return n.stop()}}),n)})))()}};function Y(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}function $(n){return function(){var e=this,t=arguments;return new Promise((function(r,o){var i=n.apply(e,t);function a(n){Y(i,r,o,a,c,"next",n)}function c(n){Y(i,r,o,a,c,"throw",n)}a(void 0)}))}}var Q={render:function(){return $(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",'\n      <div id="hero" class="hero">\n        <div class="hero__inner">\n          <h2 class="hero__title" tabindex="0">Perut keroncongan? Cari makan di <span>Kenyangin</span> sekarang!</h2>\n        </div>\n      </div>\n\n      \n      <section class="content">\n        <div class="explore">\n          <h3 class="explore__label" tabindex="0">Explore Restaurant</h3>\n          <div id="posts" class="posts"></div>\n        </div>\n      </section>\n    ');case 1:case"end":return n.stop()}}),n)})))()},afterRender:function(){return $(regeneratorRuntime.mark((function n(){var e,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,h.restaurantsList();case 2:e=n.sent,t=document.querySelector("#posts"),e.forEach((function(n){t.innerHTML+=z(n)}));case 5:case"end":return n.stop()}}),n)})))()}},X={"/":Q,"/home":Q,"/favorite":J,"/detail/:id":{render:function(){return H(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",'\n      <div id="movie" class="movie"></div>\n      <div id="likeButtonContainer"></div>\n    ');case 1:case"end":return n.stop()}}),n)})))()},afterRender:function(){return H(regeneratorRuntime.mark((function n(){var e,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return document.querySelector("#drawer").style="border: 5px solid #FF8303",e=v.parseActiveUrlWithoutCombiner(),n.next=5,h.detailRestaurant(e.id);case 5:t=n.sent,document.querySelector("#movie").innerHTML=N(t,t.menus.foods.map((function(n){return'\n  <div tabindex="0">'.concat(n.name,"</div>\n")})).join(""),t.menus.foods.map((function(n){return'\n  <div tabindex="0">'.concat(n.name,"</div>\n")})).join(""),t.customerReviews.map((function(n){return'\n<div class="movie__review">\n  <h4 tabindex="0">'.concat(n.name," - ").concat(n.date,'</h4>\n  <p tabindex="0">').concat(n.review,"</p>\n</div>\n")})).join("")),G.init({likeButtonContainer:document.querySelector("#likeButtonContainer"),restaurant:{id:t.id,name:t.name,description:t.description,city:t.city,pictureId:t.pictureId,rating:t.rating}});case 9:case"end":return n.stop()}}),n)})))()}},"/like":J},Z={init:function(n){var e=this,t=n.button,r=n.drawer,o=n.content;t.addEventListener("click",(function(n){e._toggleDrawer(n,r)})),o.addEventListener("click",(function(n){e._closeDrawer(n,r)}))},_toggleDrawer:function(n,e){n.stopPropagation(),e.classList.toggle("open")},_closeDrawer:function(n,e){n.stopPropagation(),e.classList.remove("open")}};function nn(n,e,t,r,o,i,a){try{var c=n[i](a),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(r,o)}function en(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var tn=new(function(){function n(e){var t=e.button,r=e.drawer,o=e.content,i=e.footer,a=e.toContent;!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this._button=t,this._drawer=r,this._content=o,this._footer=i,this._toContent=a,this._initialAppShell()}var e,t,r,o,i;return e=n,(t=[{key:"_initialAppShell",value:function(){Z.init({button:this._button,drawer:this._drawer,content:this._content,footer:this._footer,toContent:this._toContent})}},{key:"renderPage",value:(o=regeneratorRuntime.mark((function n(){var e,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return e=v.parseActiveUrlWithCombiner(),t=X[e],n.next=4,t.render();case 4:return this._content.innerHTML=n.sent,n.next=7,t.afterRender();case 7:case"end":return n.stop()}}),n,this)})),i=function(){var n=this,e=arguments;return new Promise((function(t,r){var i=o.apply(n,e);function a(n){nn(i,t,r,a,c,"next",n)}function c(n){nn(i,t,r,a,c,"throw",n)}a(void 0)}))},function(){return i.apply(this,arguments)})}])&&en(e.prototype,t),r&&en(e,r),n}())({button:document.querySelector("#hamburger"),drawer:document.querySelector("#drawer"),content:document.querySelector("main"),footer:document.querySelector("footer"),toContent:document.querySelector("#linktocontent")});window.addEventListener("hashchange",(function(){tn.renderPage()})),window.addEventListener("load",(function(){tn.renderPage(),a()}));var rn=new Date;tn._footer.innerHTML='<p tabindex="0">Copyright &copy; '.concat(rn.getFullYear()," - Kenyangin</p>")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,